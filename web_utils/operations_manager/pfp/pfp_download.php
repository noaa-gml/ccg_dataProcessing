<?PHP

include ("/var/www/html/om/om_inc.php");
include ("/var/www/html/om/ccgglib_inc.php");
include ("/var/www/html/om/omlib_inc.php");

if (!($fpdb = ccgg_connect()))
{
   JavaScriptAlert("Cannot connect to server at this time. Please try again later.");
   exit;
}

$code = isset( $_POST['code'] ) ? $_POST['code'] : '';
$id = isset( $_POST['id'] ) ? $_POST['id'] : '';
$task = isset( $_POST['task'] ) ? $_POST['task'] : '';
$summaryinfostr = isset( $_POST['summaryinfostr'] ) ? $_POST['summaryinfostr'] : '';
$plan = isset( $_POST['plan'] ) ? $_POST['plan'] : '';
$elev_source = isset( $_POST['elev_source'] ) ? $_POST['elev_source'] : '';
$serialport = isset( $_POST['serialport'] ) ? $_POST['serialport'] : '';
$datalogfile = isset( $_POST['datalogfile'] ) ? $_POST['datalogfile'] : '';
$histfile_reform = isset( $_POST['histfile_reform'] ) ? $_POST['histfile_reform'] : '';
$histfile_orig = isset( $_POST['histfile_orig'] ) ? $_POST['histfile_orig'] : '';
$edithistory = isset( $_POST['edithistory'] ) ? $_POST['edithistory'] : '';

$strat_abbr = 'pfp';
$strat_name = 'PFP';
$yr = date("Y");
$log = "${omdir}log/${strat_abbr}.${yr}";
$perldir = "/projects/src/pfp/";

if ( $plan == '' )
{
   $select = " SELECT project.abbr";
   $from = " FROM pfp_inv, project";
   $where = " WHERE id = '${id}'";
   $and = " AND pfp_inv.project_num = project.num";
   $sql = $select.$from.$where.$and;
   $pfpinfo = ccgg_query($sql);
   $proj_abbr = $pfpinfo[0];

   list($ccg, $project) = split("_", $proj_abbr);
   $plan_name = 'default';
   $plan = $project.'_'.$plan_name;
}
else
{
   list( $proj_abbr, $plan_name) = split("_", $plan);
   $proj_abbr = 'ccg_'.$proj_abbr;
}

BuildBanner($strat_name,$strat_abbr,GetUser());
BuildNavigator();

echo "<SCRIPT language='JavaScript' src='../../inc/php_urldecode.js'></SCRIPT>";
echo "<SCRIPT language='JavaScript' src='../../inc/php_urlencode.js'></SCRIPT>";
echo "<SCRIPT language='JavaScript' src='../../inc/php_serialize.js'></SCRIPT>";
echo "<SCRIPT language='JavaScript' src='pfp_download.js'></SCRIPT>";
echo "<SCRIPT language='JavaScript' src='../messagealert.js'></SCRIPT>";

echo "<DIV id='messagebox' class='Message' ALIGN='center'>";
echo "<P class='MediumWhiteB'>Downloading PFP History... Please Wait.</P>";
echo "</DIV>";
#
# Need this site list to verify codes
#
$siteinfo = DB_GetAllSiteInfo("", $strat_abbr);
for ($i=0,$z=''; $i<count($siteinfo); $i++)
{
   $field = split("\|",$siteinfo[$i]);
   $z = ($i == 0) ? $field[1] : "${z},${field[1]}";
}
JavaScriptCommand("sites = \"${z}\"");

switch ($task)
{
   case "download":
   case "download_noflaghis":
      #
      # Create names of temporary history files (original and reformatted)
      #
      CreateHistName($histfile_orig, $histfile_reform, $yr);

      # Create the name of the datalog file based on the history file name
      $datalogfile = str_replace(".his", ".dat", $histfile_reform);
      #
      # Attempt to download PFP history
      #
      #$perl = "${omdir}pfp/src/download/pfp_download.pl";
      $perl = "${omdir}pfp/src/as_comm/get_as_history.pl";
      exec("${perl} -p=${serialport} -o=${histfile_orig} 2>&1", $arr, $ret);
      
      if ($ret)
      {
         #
         # Download Failed
         #
         $str = implode("\\n", $arr);
         UpdateLog($log,"Download from ${serialport} to ${id} failed.");
         if ($str) { UpdateLog($log, "Download Error:  ${str}."); }
         JavaScriptAlert($str);
      }
      else
      {
         #
         # Download Succeeded
         #
         #
         # Reformat history files generated by firmware
         # version 2.24 and 3.03.  Higher versions pass thru.
         #
         if (!(ReformatHistory($histfile_orig, $histfile_reform))) { break; }

         # Check the history file 
         $perl = "${perldir}check_history.pl";
         exec("${perl} -f${histfile_reform} 2>&1", $chkarr, $chkret);

         if ($chkret)
         {
            #
            # Download Failed
            #
            $str = implode("\n", $chkarr);
            UpdateLog($log,"Download from ${serialport} to ${id} failed.");
            if ($str) { UpdateLog($log, "Download Error:  ${str}."); }
            JavaScriptAlert("The history file did not pass all checks. Please\\\n try to download it again. If you see this message\\\n a second time please contact John Mund.");
         }
         else
         {
            #
            # Construct Summary
            #

            $all = false;
            if ( $task === 'download_noflaghis' ) { $all = true; }

            $summaryaarr = MakePFPSummary($proj_abbr,$histfile_reform, $all);
            $status = (!empty($summaryaarr)) ? "download_true" : "precheck";

            if ( $status === "precheck" )
            { JavaScriptAlert("Unable to create PFP summary. Check if the PFP was sampled. $histfile_reform"); }

            if ( $status == "download_true" )
            {
               for ( $i=0; $i<count($summaryaarr); $i++ )
               {
                  $tmpid = split("-", $summaryaarr[$i]['id']);
                  $chkid = split("-", $id);
                  if ( $chkid[0] != $tmpid[0] )
                  {
                     $status = "precheck";
                     $str = "Check in PFP ID '$tmpid[0]' does not match PFP ID '$chkid[0]' of downloaded PFP";
                     if ($str) { UpdateLog($log, "Download Error:  ${str}."); }
                     JavaScriptAlert($str);
                     break;
                  }
               }
            }

            #
            # Try to download datalog
            #
            #$perl_datalog = "${omdir}pfp/src/download/pfp_download_datalog.pl";
            $perl_datalog = "${omdir}pfp/src/as_comm/get_as_datalog.pl";

            # Only download for aircraft or surface projects
            $proj_num = DB_GetProjectNum($proj_abbr);
            if ( $proj_num == 1 || $proj_num == 2 )
            {
                set_time_limit(0);#trying this to see if helps with a timeout issue. its unclear if this setting applies during exec though. jwm 3/2024 
                exec("${perl_datalog} -p=${serialport} -o=${datalogfile} 2>&1", $dlarr, $dlret);
             }

            if ($dlret)
            {
               #
               # Datalog Download Failed
               #
               $str = implode("\n", $dlarr);
               UpdateLog($log,"Datalog download from ${serialport} to ${id} failed.");
               if ($str) { UpdateLog($log, "Download Error:  ${str}."); }
               JavaScriptAlert($str);
            }
         }
      }
      break;
   case "history":
      $status = "edit_history";
      break;
   case "discard":
      if (DB_PfpToPrep($id))
      {
         DB_RemovePFPFlasks($id);

         UpdateLog($log,"Defaults. ${id} returned to Prep");
         JavaScriptCommand("document.location='pfp_checkin.php'");
         unlink($histfile_orig);
         unlink($histfile_reform);
         if ( file_exists($datalogfile) ) { unlink($datalogfile); }
      }
      else
      { JavaScriptAlert("Failed trying to return ${id} to Prep Room"); }
      break;
   case "accept_history":
      CreateHistName($tmp_histfile_orig, $tmp_histfile_reform, $yr);

      if (!(ReformatHistory($histfile_orig, $tmp_histfile_reform))) { break; }

      $tmpsummaryaarr = MakePFPSummary($proj_abbr,$tmp_histfile_reform, false);
      unlink($tmp_histfile_reform);

      if (!($fp = fopen($histfile_reform, "w")))
           {
         JavaScriptAlert("(accept_history)Unable to open ${histfile_reform}.  Get help.");
         break;
      }
      fputs($fp, str_replace("\r", "", $edithistory));
      fclose($fp);

      $summaryaarr = MakePFPSummary($proj_abbr,$histfile_reform, false);

      for ( $i=0; $i<count($tmpsummaryaarr); $i++ )
      {
         for ( $j=0; $j<count($summaryaarr); $j++ )
         {
            if ( $tmpsummaryaarr[$i]['id'] === $summaryaarr[$j]['id'] )
            {
               if ( $tmpsummaryaarr[$i]['alt'] != $summaryaarr[$j]['alt'] )
               {
                  $summaryaarr[$j]['alt_source'] = $tmpsummaryaarr[$i]['alt_source'].'_edit';
               }
            }
         }
      }

      $status = (isset($summaryaarr)) ? "download_true" : "precheck";
      break;
   case "read":
      if ( $histfile_orig == '' ||
           $histfile_reform == '' ||
           ! file_exists($histfile_orig) ||
           ! file_exists($histfile_reform) )
      {
         #
         # Attempt to read user-supplied history file
         # file must be in /projects/tmp/.  File must
         # be in firmware version 3.06+ format.
         #
         CreateHistName($histfile_orig, $histfile_reform, $yr);
         #
         # Need year in file name (version 2.24 only)
         #
         copy("/projects/tmp/temp.his", $histfile_orig);
      }

      if (!(ReformatHistory($histfile_orig, $histfile_reform))) { break; }
      $summaryaarr = MakePFPSummary($proj_abbr,$histfile_reform,false);
      $status = (isset($summaryaarr)) ? "download_true" : "precheck";
      if ( $status == "download_true" )
      {
         for ( $i=0; $i<count($summaryaarr); $i++ )
         {
            $tmpid = split("-", $summaryaarr[$i]['id']);
            $chkid = split("-", $id);
            if ( $chkid[0] != $tmpid[0] )
            {
               $status = "precheck";
               $str = "Check in PFP ID '$tmpid[0]' does not match PFP ID '$chkid[0]' of downloaded PFP";
               if ($str) { UpdateLog($log, "Download Error:  ${str}."); }
               JavaScriptAlert($str);
               break;
            }
         }
      }

      if ( file_exists("/projects/tmp/temp.dat") )
      {
         copy("/projects/tmp/temp.dat", $datalogfile);
         unlink("/projects/tmp/temp.dat");
         JavaScriptAlert("/projects/tmp/temp.dat has been stored by the application.\\nIt. has also been removed to prevent duplication.");
      }
      break;
   case "bypass":
      DB_PreCheckin($id, $z);
      if ($z != "") { JavaScriptAlert($z); }
      else
      {
         #
         # Check in PFP unit
         #
         if (DB_Checkin($code, $proj_abbr, $plan_name, $id))
         { UpdateLog($log, "${id} checked in from ${code}.  Download by-passed."); }
         else { JavaScriptAlert("Unable to check in ${id} from ${code}"); break; }
         #
         # Update PFP shipping
         #
         DB_UpdateShip($code, $proj_abbr, $id);
      }
      JavaScriptCommand("document.location='pfp_checkin.php'");
      break;
   case "accept":
      $summaryinfoaarr = unserialize($summaryinfostr);

      # Check contents of $summaryinfoaarr
      if ( count($summaryinfoaarr) == 0 )
      {
         JavaScriptAlert("No summary information found.  Try downloading again.");
         break;
      }

      list ( $project, $plan_name ) = split("_", $plan);

      $projinfo = DB_GetAllProjectInfo();

      for ( $i=0; $i<count($projinfo); $i++ )
      {
         $tmp = split("\|",$projinfo[$i]);
         if ( preg_match("/$project/", $tmp[2] ) )
         {
            $proj_abbr = $tmp[2];
         }
      }
      #
      # First, remove PFP individual flask entries from inventory
      #
      DB_RemovePFPFlasks($id);
      #
      # Check in PFP unit
      #
      if (DB_Checkin($code, $proj_abbr, $plan_name, $id)) { UpdateLog($log, "${id} checked in from ${code}"); }
      else { JavaScriptAlert("Unable to check in ${id} from ${code}"); break; }
      #
      # Update PFP shipping
      #
      DB_UpdateShip($code, $proj_abbr, $id);
      #
      # Assign event numbers
      #
      $event_nums = array();
      $event_num = 0;
      for ($i=0; $i<count($summaryinfoaarr); $i++)
      {
         if ( ! isset($summaryinfoaarr[$i]) ) { continue; }
         #
         # Build history file name
         # Note path and name are determined by
         # code and date of first record.
         #
         if ($i == 0)
         {
            list($pre,$suf) = split("-FP",$id);
            $tmp = split(":", $summaryinfoaarr[$i]['time']);
            $path = "/projects/aircraft/".strtolower($summaryinfoaarr[$i]['code'])."/history/";
            $file = sprintf("%s.%02.2d%02.2d.%s.his",$summaryinfoaarr[$i]['date'],$tmp[0],$tmp[1], $pre);
            $dlpath = "/projects/aircraft/".strtolower($summaryinfoaarr[$i]['code'])."/datalog/";
            $dlfile = str_replace(".his", ".dat", $file);
         }

         $summaryinfoaarr[$i]['elevation_source'] = $elev_source;
         $event_num = DB_SetEventNum($summaryinfoaarr[$i],$proj_abbr,$plan_name);
         if ( $event_num > 0 )
         {
            UpdateLog($log,"Event number assigned to ".$summaryinfoaarr[$i]['id']);
            array_push($event_nums, $event_num);
         }
         else
         { JavaScriptAlert("Unable to assign event number for ".$summaryinfoaarr[$i]['id']); }
      }
      #
      # Create the database block in the history file
      #
      if ( ! CreateDBBlock($histfile_reform, $event_nums) )
      {
         JavaScriptAlert("Unable to create database block. Get help.");
         break;
      }
      # Add comment in reformatted history file regarding a change in
      #    logic. If the sample altitude in the Altitude History
      #    section is less than 100 then they are considered sequence
      #    numbers not sample altitudes and are replaced with the
      #    database altitude ( intake height + elevation )
      CommentFile($histfile_reform, $histfile_reform);

      #
      # Archive reformatted history
      #
      if ((ArchiveFile($histfile_reform, $path, $file)))
      { unlink($histfile_reform); }
      #
      # Archive original history
      # archive file now has .arc extension, 2010-01-25 (kam)
      #
      $arcfile = str_replace(".his", ".arc", $file);
      if ((ArchiveFile($histfile_orig, "${path}archive/", $arcfile)))
      { unlink($histfile_orig); }

      if ( file_exists($datalogfile) )
      {
         #
         # Archive datalog
         #
         if ((ArchiveFile($datalogfile, $dlpath, $dlfile)))
         { unlink($datalogfile); }
      }

      # Clear the data out because we are finished
      $summaryinfostr = '';
      $summaryinfoaarr = array ();
      $task = '';

      JavaScriptCommand("document.location='pfp_checkin.php'");
      break;
}
MainWorkArea();
exit;
#
# Function MainWorkArea ########################################################
#
function MainWorkArea()
{
global $bg_color;
global $omdir;
global $code,$id;
global $status;
global $task;
global $histfile_reform, $histfile_orig;
global $datalogfile;
global $summaryaarr;
global $plan;
global $proj_abbr;
global $strat_abbr;
global $plan_name;
global $serialport;

$status = (empty($status)) ? 'precheck' : $status;


echo "<FORM name='mainform' method=POST>";

echo "<INPUT TYPE='HIDDEN' NAME='status' VALUE='${status}'>";
echo "<INPUT TYPE='HIDDEN' NAME='task' VALUE='${task}'>";
echo "<INPUT TYPE='HIDDEN' NAME='code' VALUE='${code}'>";
echo "<INPUT TYPE='HIDDEN' NAME='id' VALUE='${id}'>";
echo "<INPUT TYPE='HIDDEN' NAME='summaryinfostr' VALUE=''>";
echo "<INPUT TYPE='HIDDEN' NAME='plan' VALUE='${plan}'>";
echo "<INPUT TYPE='HIDDEN' NAME='datalogfile' VALUE='${datalogfile}'>";
echo "<INPUT TYPE='HIDDEN' NAME='histfile_reform' VALUE='${histfile_reform}'>";
echo "<INPUT TYPE='HIDDEN' NAME='histfile_orig' VALUE='${histfile_orig}'>";
echo "<INPUT TYPE='HIDDEN' NAME='serialport' VALUE='${serialport}'>";

#
##############################
# Title
##############################
#
echo "<TABLE cellspacing=10 cellpadding=10 width='100%' align='center'>";
echo "<TR align='center'>";
echo "<TD align='center' class='XLargeBlueB'>PFP Check In";
if ($status == 'download_true') { echo "<FONT class='XLargeGreenB'> - Succeeded</FONT>"; }
if ($status == 'download_false') { echo "<FONT class='XLargeRedB'> - Failed</FONT>"; }
if ($status == 'edit_history') { echo "<FONT class='XLargeRedB'> - Edit History</FONT>"; }
echo "</TD>";
echo "</TR>";
echo "</TABLE>";

if ($status == 'precheck')
{
   #
   ##############################
   # Download Instructions
   ##############################
   #
   echo "<TABLE cellspacing=2 cellpadding=2 width='75%' align='center'>";
   echo "<TR align='center'>";
   echo "<TD align='center' class='LargeBlackB'>$id from $code</TD>";
   echo "</TR>";
   echo "<TR align='center'>";
    echo "<TD align='left' class='LargeBlackB'>";
   echo "<P align='left' class='LargeBlackB'>Download</P>";
   echo "<BLOCKQUOTE>";
   echo "<P align='left' class='MediumRedB'>1. Connect PFP power and communication cables</P>";
   echo "<P align='left' class='MediumRedB'>2. Switch on PFP power</P>";
   echo "<P align='left' class='MediumRedB'>3. Select Port Location ";
   echo "<SELECT class='MediumBlackN' NAME='sp' SIZE='1'>";
   echo "<OPTION SELECTED VALUE='/dev/ttyr300'>PFP Prep Room (ttyr300)</OPTION>";
   echo "<OPTION VALUE='/dev/ttyr200'>PFP Repair Room (ttyr200)</OPTION>";
#   echo "<OPTION VALUE='/dev/ttyr100'>John Mundo's Office (ttyr100)</OPTION>";
   echo "</SELECT>";
   echo "</P>";
   echo "<P align='left' class='MediumRedB'>4. Press";
   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Download' onClick='DownloadCB()'>";
   echo " or ";

   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Cancel' onClick='CancelCB()'></P>";
   echo "</BLOCKQUOTE>";
   echo "</TD></TR>";
   echo "<TR align='center'>";
   echo "<TD align='left' class='LargeBlackB'>";
   echo "<P align='left' class='LargeBlackB'>Download without Flag History logic <FONT align='left' class='MediumRedB'>(INX ccg_surface)</FONT></P>";
   echo "<BLOCKQUOTE>";
   echo "<P align='left' class='MediumRedB'>1. Connect PFP power and communication cables</P>";
   echo "<P align='left' class='MediumRedB'>2. Switch on PFP power</P>";
   echo "<P align='left' class='MediumRedB'>3. Select Port Location ";
   echo "<SELECT class='MediumBlackN' NAME='sp2' SIZE='1'>";
   echo "<OPTION SELECTED VALUE='/dev/ttyr100'>PFP Prep Room (ttyr100)</OPTION>";
   echo "<OPTION VALUE='/dev/ttyr200'>PFP Repair Room (ttyr200)</OPTION>";
   echo "<OPTION VALUE='/dev/ttyr300'>John Mund's Office (ttyr300)</OPTION>";
   echo "</SELECT>";
   echo "</P>";
   echo "<P align='left' class='MediumRedB'>4. Press";
   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Download' onClick='Download2CB()'>";
   echo " or ";

   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Cancel' onClick='CancelCB()'></P>";
   echo "</BLOCKQUOTE>";
   echo "</TD></TR>";
   echo "<TR align='center'>";
   echo "<TR align='center'>";
   echo "<TD align='left' class='LargeBlackB'>";
   echo "<P align='left' class='LargeBlackB'>ByPass</P>";
   echo "<BLOCKQUOTE>";
   echo "<P align='left' class='MediumRedB'>1. Select an option</P>";
   echo "<INPUT TYPE='radio' NAME='radio' VALUE='read'>";
   echo "<FONT class = 'MediumBlackB'>Read user-supplied HISTORY file (/ccg/tmp/temp.his and /ccg/tmp/temp.dat)</FONT></P>";
   echo "<INPUT TYPE='radio' NAME='radio' VALUE='bypass'>";
   echo "<FONT class = 'MediumBlackB'>CHECK IN (no download)</FONT></P>";
   echo "<INPUT TYPE='radio' NAME='radio' VALUE='discard'>";
   echo "<FONT class = 'MediumBlackB'>CHECK IN (no download) AND return to PREP</FONT></P>";
   echo "<P align='left' class='MediumRedB'>2. Press";
   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Ok' onClick='ChkOptionCB()'>";
   echo " or ";

   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Cancel' onClick='CancelCB()'>";
   echo "      <INPUT TYPE='button' class='Btn' value='?' onClick='ByPassHelpCB()'></P>";
   echo "</BLOCKQUOTE>";
   echo "</TD></TR>";
   echo "</TABLE>";
}
if ($status == 'download_true')
{
   $nflasks = DB_GetPFPNumFlasks($id);
   $pathinfo = DB_GetDefPath($code, $proj_abbr, $strat_abbr);
   list($pathno,$pathname) = split("\|",$pathinfo);


   echo "<TABLE cellspacing=4 cellpadding=4 width='100%' align='center'>";
   echo "<TR align='center'>";
   echo "<TD align='center' class='LargeBlackB' colspan=3>$id from $code</TD>";
   echo "</TR>";
   echo "<TR align='center'>";
   echo "<TD width='50%' align='center' class='MediumBlackN'>Default Measurement Path: ";
   echo "<FONT class='MediumBlackB'>$pathname</FONT></TD>";
   echo "<TD>";
   $proj_num = DB_GetProjectNum($proj_abbr);
   echo " <FONT class='MediumBlackN'>Elevation Source </FONT>";

   echo " <SELECT class='MediumBlackB' NAME='elev_source' SIZE=1>";
   $selected = ( $proj_num != 2 ) ? 'SELECTED' : '';
   echo "  <OPTION value='DB' $selected>Database</OPTION>";
   $selected = ( $proj_num == 2 ) ? 'SELECTED' : '';
   echo "  <OPTION value='DEM' $selected>DEM</OPTION>";
   echo " </SELECT>";
   echo "</TD>";
   echo "<TD width='25%' align='right'>";
   $key = sprintf("%s_%d*.txt",strtolower($code),$nflasks);

   $r=rand();
   $tmpfile="${omdir}tmp/xxx_${r}.txt";

   $tmp = "/bin/ls /projects/aircraft/plans/measurement/${key} > ${tmpfile}";
   system($tmp);
   $templates = file($tmpfile);
   unlink($tmpfile);

   echo "<FONT class='LargeBlackN'>Plan </FONT>";

   echo "<SELECT class='LargeBlackB' NAME='planlist' SIZE=1 onChange='SetPlanCB(this.value)'>";
   
   $template = '';
   for ($i=0; $i<count($templates); $i++)
   {
      $p1 = strrpos($templates[$i],"/")+1;
      $p2 = strrpos($templates[$i],".");
      $field =  split("_",substr($templates[$i],$p1,$p2-$p1));
      $z = strtoupper($field[2])." - (${field[3]})";
      $val = strtolower("$field[2]_$field[3]");

      if (preg_match("/$field[2]/",$proj_abbr) &&
          strtoupper($field[3]) == strtoupper($plan_name) )
      {
         $selected = 'SELECTED';
         $template = $templates[$i];
      }
      else
      {
         $selected = '';
      }
      
      echo "<OPTION ${selected} VALUE='${val}'>${z}</OPTION>";
   }

   echo "</SELECT>";

   if ( $template == '' )
   {
      JavaScriptAlert("Error in finding measurement plan.");
      return FALSE;
   }

   echo "</TD>";
   echo "</TR>";
   echo "</TABLE>";
   #
   ##############################
   # Define History Table
   ##############################
   #
   $table["label"] = array("Code","Date","Time","Flask Id","Me","Lat","Lon","Alt","Alt Source", "Temp","RH", "Press","Comment", "Status Number");
   $table["name"] = array("code","date","time","id","me","lat","lon","alt","alt_source","temp","rh", "press","comment", "status_num");
   $table["sz"] = array(4, 10, 8, 10, 2, 9,10,9,10,10,10,10, 10, 2);
   $table["ml"] = array(3, 10, 8, 10, 1, 8, 9,8,15,10,10,10,128, 1);
   #
   # Measurement Path
   #
   $dummy = str_repeat("-",30);

   echo "<TABLE width=100% align='center' border='1' cellpadding='1' cellspacing='1'>";

   echo "<TR></TR>";
   echo "<TR>";

   echo "<TH valign='bottom'><FONT class='MediumBlackB'>No.</FONT></TH>";

   for ($i=0; $i<count($table['label']); $i++)
   {
      echo "<TH valign='bottom'><FONT class='MediumBlackB'>";
      echo $table["label"][$i];
      echo "</FONT>";
      if ( $table["name"][$i] === 'status_num' )
      {
         echo "<INPUT type='button' class='Btn' VALUE='?' onClick='StatusNumHelp();'>";
      }
      
      echo "</TH>";
   }
   echo "<TH><FONT class='MediumBlackB'>Measurement Path</FONT></TH>";
   echo "</TR>";

   $defpath = split(",",$pathno);
   $n = count($summaryaarr);
   JavaScriptCommand("nsamples = \"${n}\"");

   echo "<TR>";

   # Prepare the template associative array
   $templatearr = file(chop($template));
   $templateaarr = array ();

   foreach ( $templatearr as $templateline )
   {
      $fields = preg_split("/\s+/",$templateline);

      $r = array_shift($fields);
      $templateaarr[$r] = array();

      for ( $i=0; $i<count($fields); $i++ )
      { $templateaarr[$r][$i+1] = $fields[$i]; }
   }

   for ($i=0,$row=1; $i<count($summaryaarr); $i++,$row++)
   {
      $tmparr = split('-', $summaryaarr[$i]['id']);
      $flask_suffix_id = intval($tmparr[1]);

      echo "<TR>";

      echo "<TD class='MediumBlackB'>${row}</TD>";

      for ($ii=0; $ii<count($table['label']); $ii++)
      {
         $l = $table["sz"][$ii];
         $m = $table["ml"][$ii];
         $z = sprintf("his_%s%02d",$table["name"][$ii],$row);

         $zz = ($table["name"][$ii] == 'comment') ? '' : $summaryaarr[$i][$table["name"][$ii]];

         echo "<TD>";
         if ( $table["name"][$ii] == 'me' )
         {
            echo "<INPUT type='text' size='${l}' name='${z}'
            value='${zz}' maxlength='${m}' class='MediumBlackN' DISABLED 
            onFocus='SetBackground(this,true)' onBlur='SetBackground(this,false)' onkeyup='UpdateMethod(this)'>";
         }
         else
         {
            echo "<INPUT type='text' size='${l}' name='${z}'
            value='${zz}' maxlength='${m}' class='MediumBlackN' DISABLED 
            onFocus='SetBackground(this,true)' onBlur='SetBackground(this,false)'>";
         }
         echo "</TD>";
      }

      #
      # PFP sample flag (assigned by create_summary.pl)
      #
      JavaScriptCommand("flags[$row] = \"".$summaryaarr[$i]['status_num']."\"");
      #
      # Add analysis path pulldowns
      #
      $sys_defi = DB_GetSystemDefi();
      $n = count($sys_defi);
      JavaScriptCommand("npaths = \"${n}\"");

      for ($ii=0,$col=1; $ii<$n; $ii++,$col++)
      {
         $z = sprintf("path%02d%02d",$row,$col);

         echo "<TD>";
         echo "<SELECT class='SmallBlackN' NAME='${z}' SIZE='1'>";
         echo "<OPTION VALUE=''>$dummy</OPTION>";
         for ($iii=0; $iii<$n; $iii++)
         {
            $field = split("\|",$sys_defi[$iii]);

            if ( $summaryaarr[$i]['status_num'] &&
                 isset($templateaarr[$flask_suffix_id][$col]) &&
                 strtoupper($field[1]) == strtoupper($templateaarr[$flask_suffix_id][$col]) )
            { $selected = 'SELECTED'; }
            else
            { $selected = ''; }

            echo "<OPTION VALUE='${sys_defi[$iii]}' $selected>${field[1]}</OPTION>";
         }
         echo "</SELECT>";
         echo "</TD>";
      }
      echo "</TR>";
   }
   echo "</TD>";
   echo "</TR>";
   echo "</TABLE>";

   echo "<TABLE width='40%' cellspacing='2' cellpadding='2' align='center'>";

   echo "<TR>";

   echo "<TD align='center'>";
   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Accept' onCLick='AcceptCB(this)'>";
   echo "</TD>";

   echo "<TD align='center'>";
   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Discard' onClick='DiscardCB()'>";
   echo "</TD>";

   echo "<TD align='center'>";
   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Edit' onClick='EditCB()'>";
   echo "</TD>";

   echo "<TD align='center'>";
   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Defaults' onClick='SetDefaultsCB()'>";
   echo "</TD>";

#   echo "<TD align='center'>";
#   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='History' onClick='HistoryCB()'>";
#   echo "</TD>";

   echo "<TD align='center'>";
   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Cancel' onClick='CancelCB()'>";
   echo "</TD>";

   echo "</TR>";
   echo "</TABLE>";
   #
   # Read History file
   #
   $arr = file($histfile_reform);
   echo "<TABLE cellspacing=4 cellpadding=4 width='100%' align='center'>";
   echo "<TR align='center'>";
   echo "<TD align='center'>";
   echo "<TEXTAREA class='MediumBlackMonoN' name='edithistory' READONLY DISABLED cols=80 rows=15>";
   #
   # Post History file
   #
   for ($i=0; $i<count($arr); $i++) { echo str_replace("","",$arr[$i]); }
   echo "</TEXTAREA>";
        echo "</TD></TR>";
   echo "</TABLE>";
}

if ($status == 'edit_history')
{
   #
   # Read History file
   #
   $arr = file($histfile_reform);

   echo "<TABLE cellspacing=4 cellpadding=4 width='100%' align='center'>";
   echo "<TR align='center'>";
   echo "<TD align='center' class='LargeBlackB'>$id from $code</TD>";
   echo "</TR>";
   echo "<TR align='center'>";
   echo "<TD align='center'>";
   echo "<TEXTAREA class='MediumBlackMonoN' name='edithistory' READONLY DISABLED cols=80 rows=15>";
   #
   # Post History file
   #
   for ($i=0; $i<count($arr); $i++) { echo str_replace("","",$arr[$i]); }
   echo "</TEXTAREA>";
   echo "</TABLE>";

   echo "<TABLE width='40%' cellspacing='2' cellpadding='2' align='center'>";

   echo "<TR>";

   echo "<TD align='center'>";
   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Accept' onCLick='AcceptHistoryCB()'>";
   echo "</TD>";

   echo "<TD align='center'>";
   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Edit' onClick='EditHistoryCB()'>";
   echo "</TD>";

   echo "<TD align='center'>";
   echo "<B><INPUT TYPE='button' class='Btn' NAME='Task' value='Cancel' onClick='history.back()'>";
   echo "</TD>";

   echo "</TR>";
   echo "</TABLE>";
}

echo "</BODY>";
echo "</HTML>";
}
#
# Function DB_SetEventNum ########################################################
#
function DB_SetEventNum($infoaarr,$proj_abbr,$plan_name)
{
   $proj_num = DB_GetProjectNum($proj_abbr);
   if ( empty($infoaarr) || ! is_array($infoaarr) ) { return false; }

   $site_num = DB_GetSiteNum($infoaarr['code']);

   $infoaarr['comment'] = urldecode($infoaarr['comment']);

   if ( $infoaarr['me'] != 'I' )
   {
      # Only add the prefill comment if the method is not 'I'.
      #   Method 'I' means that the sample was integrated.
      #   Not necessarily within the PFP. 

      if ( $infoaarr['status_num'] == '2' )
      {
         if ( $infoaarr['comment'] != '' )
         { 
            $infoaarr['comment'] = $infoaarr['comment'].'~+~prefill:pass';
         }
         else
         { $infoaarr['comment'] = 'prefill:pass'; }
      }
      elseif ( $infoaarr['status_num'] == '3' )
      {
         if ( $infoaarr['comment'] != '' )
         { 
            $infoaarr['comment'] = $infoaarr['comment'].'~+~prefill:fail';
         }
         else
         { $infoaarr['comment'] = 'prefill:fail'; }
      }
   }
   
   list($yr,$mo,$dy) = split("-",$infoaarr['date']);
   #
   # Set time from 99:99:99 (default) to 12:34:56
   # June 2006 - kam, pml
   #
   if ( !(strncmp($infoaarr['time'], "99", 2)) ) { $infoaarr['time'] = "12:34:56"; }
   list($hr,$mn,$sc) = split(":",$infoaarr['time']);
   $dd = date2dec($yr,$mo,$dy,$hr,$mn,$sc);
   #
   # Convert altitude from feet to meters
   #
   $alt = ($infoaarr['alt'] < -999) ? $infoaarr['alt']: $infoaarr['alt']* 0.3048;
   #
   # If event information already exists do not 
   # assign another event number
   #
   $select = "SELECT COUNT(*)";
   $from = " FROM flask_event";
   $where =" WHERE id='".$infoaarr['id']."'";
   $and = " AND date='".$infoaarr['date']."'";
   $and = "${and} AND time='".$infoaarr['time']."'";
   $and = "${and} AND me='".$infoaarr['me']."'";
   $and = "${and} AND site_num='${site_num}'";
   $and = "${and} AND strategy_num='2'";

   #JavaScriptAlert("$select $from $where $and");
   $res = ccgg_query($select.$from.$where.$and);

   if ($res[0] == '0')
   {

      # Determine the elevation based on the DEM or from the database
      # based on what the user passed in
      if ( $infoaarr['elevation_source'] === 'DEM' && abs($infoaarr['lat']) < 90 && abs($infoaarr['lon']) < 180 )
      {
         exec(escapeshellcmd('/ccg/DEM/ccg_elevation.pl').' -lat='.escapeshellarg($infoaarr['lat']).' -lon='.escapeshellarg($infoaarr['lon']), $elevation_str);

         list($elevation_value, $elevation_source) = split("\|", $elevation_str[0], 2);
      }
      else
      {
         $sitedescinfo = DB_GetSiteDesc($infoaarr['code'], 'PFP');

         $elevation_value = '-9999.99';
         for ($j=0; $j<count($sitedescinfo); $j++)
         {
            $tmpfields = split("\|", $sitedescinfo[$j]);

            if ( $tmpfields[0] == $proj_num )
            {
               $elevation_value = $tmpfields[4];
               break;
            }
         }
         $elevation_source = 'DB';
      }


      $commentstr = ( $infoaarr['comment'] == '' ) ? 'alt:'.$infoaarr['alt_source'] : 'alt:'.$infoaarr['alt_source'].'~+~'.$infoaarr['comment'];
      $commentstr = $commentstr.'~+~elev:'.$elevation_source;

      #
      # Assign Event Number
      #
      $insert = "INSERT INTO flask_event";
      $list = " (num,strategy_num,project_num,site_num,date,time,dd,id,me,lat,lon,alt,elev,comment)";
      $values = " VALUES(NULL,'2','${proj_num}','${site_num}','".$infoaarr['date']."'";
      $values = "${values},'".$infoaarr['time']."','${dd}','".$infoaarr['id']."'";
      $values = "${values},'".$infoaarr['me']."','".$infoaarr['lat']."'";
      $values = "${values},'".$infoaarr['lon']."','${alt}','${elevation_value}'";
      $values = "${values},'".$commentstr."')";

      #JavaScriptAlert("$insert$list$values");
      $res2 = ccgg_insert($insert.$list.$values);
      #$res2 = "";

      if (!empty($res2)) { return(0); }
   }
   else JavaScriptAlert($infoaarr['id']." event details already exist in DB.\\nNew event number not assigned.");
   #
   # Get assigned event number
   #
   $select = "SELECT num";
   $from = " FROM flask_event";
   $where =" WHERE id='".$infoaarr['id']."'";
   $and = " AND date='".$infoaarr['date']."'";
   $and = "${and} AND time='".$infoaarr['time']."'";
   $and = "${and} AND me='".$infoaarr['me']."'";
   $and = "${and} AND site_num='${site_num}'";
   $and = "${and} AND strategy_num='2'";

   $res = ccgg_query($select.$from.$where.$and);
   $ev_num = $res[0];
   #
   # Insert PFP flask if it does not exist in PFP inventory
   #
   $select = "SELECT COUNT(*)";
   $from = " FROM pfp_inv";
   $where =" WHERE id='".$infoaarr['id']."'";
   $res = ccgg_query($select.$from.$where);

   if ($res[0] == '0')
   {
      #
      # Insert
      # Indicate that PFP flask is now in analysis loop
      #
      $insert = "INSERT INTO pfp_inv";
      $list = " (id,site_num,sample_status_num,path,event_num,project_num,plan)";
      $values = " VALUES('".$infoaarr['id']."','${site_num}','3','".$infoaarr['path']."','${ev_num}','${proj_num}','${plan_name}')";
      #JavaScriptAlert("$insert$list$values");
      ccgg_insert($insert.$list.$values);
   }
   else
   {
      #
      # Update
      # Indicate that PFP flask is now in analysis loop
      #
      $update = "UPDATE pfp_inv";
      $set = " SET path='".$infoaarr['path']."',event_num='${ev_num}'";
      $where = " WHERE id='".$infoaarr['id']."'";

      #JavaScriptAlert("$update$set$where");
      ccgg_insert($update.$set.$where);
   }

   #
   # Insert/Update temperature, pressure, relative humidity information
   #
   $params = array( "temp", "press", "rh" );
   for ( $i=0; $i<count($params); $i++ )
   {
      $param = $params[$i];
      if ( $params[$i] == 'temp' && $infoaarr[$params[$i]] == '-999.9' ) { continue; }
      if ( $params[$i] == 'press' && $infoaarr[$params[$i]] == '-9999.9' ) { continue; }
      if ( $params[$i] == 'rh' && $infoaarr[$params[$i]] == '-999.9' ) { continue; }

      $param_num = DB_GetParamNum($params[$i]);

      $select = " SELECT COUNT(*)";
      $from = " FROM flask_data";
      $where = " WHERE event_num = '$ev_num'";
      $and = " AND parameter_num = '$param_num'";

      $sql = $select.$from.$where.$and;
      $res = ccgg_query($sql);

      if ($res[0] == '0')
      {
         # INSERT
         $insert = " INSERT INTO flask_data";
         $list = " (event_num, parameter_num, value, inst)";
         $values = " VALUES('${ev_num}','${param_num}','".$infoaarr[$params[$i]]."', 'MA')";

         $sql = $insert.$list.$values;
         #JavaScriptAlert("$sql");
         $res = ccgg_insert($sql);
         #$res = "";

         if (!empty($res)) { return(0); }
      }
      else
      {
         # UPDATE
         $update = " UPDATE flask_data";
         $set = " SET value = '".$infoaarr[$params[$i]]."'";
         $where = " WHERE event_num = '$ev_num'";
         $and = " AND parameter_num = '$param_num'";
                                                                                          
         $sql = $update.$set.$where.$and;
         #JavaScriptAlert("$sql");
         $res = ccgg_insert($sql);
         #$res = "";
                                                                                          
         if (!empty($res)) { return(0); }
      }
   }
   return($ev_num);
}
#
# Function DB_PreCheckin ########################################################
#
function DB_PreCheckin($id,&$err)
{
   $err = "";

   $sql = "SELECT id,sample_status_num FROM pfp_inv WHERE id='${id}'";
   $res = ccgg_query($sql);
   $n = count($res);

   if ($n == 0) { $err = "${id} no longer exists in DB."; }
   elseif ($n > 1) { $err = "${id} exists multiple times in DB."; }
   else
   {
      $tmp=split("\|",$res[0]);
      if ($tmp[1] != '2') { $err = "${id} no longer available for check in."; }
   }
}
#
# Function DB_Checkin ########################################################
#
function DB_Checkin($code,$proj_abbr,$plan_name,$id)
{
   #
   # Check in PFP unit
   #
   $now = date("Y-m-d");
   $site_num = DB_GetSiteNum($code);
   $proj_num = DB_GetProjectNum($proj_abbr);
   list($pre,$suf) = split("-FP",$id);

   $update = "UPDATE pfp_inv";
   $set = " SET site_num='${site_num}',date_in='${now}'";
   $set = "${set},project_num='${proj_num}',plan='${plan_name}'";
   $set = "${set},sample_status_num='3'";
   $where = " WHERE id LIKE '${pre}-%'";

   #JavaScriptAlert("$update$set$where");
   $res = ccgg_insert($update.$set.$where);
   #$res = "";
   if (!empty($res)) { return(FALSE); }
   return(TRUE);
}
#
# Function DB_UpdateShip ########################################################
#
function DB_UpdateShip($code,$proj_abbr, $id)
{
   $now=date("Y-m-d");
   $site_num=DB_GetSiteNum($code);
   $proj_num=DB_GetProjectNum($proj_abbr);
   #
   # Retrieve ship date
   #
   $sql = "SELECT date_out FROM pfp_inv WHERE id='${id}'";
   $then = ccgg_query($sql);
   #
   # Update shipping table
   #
   $insert = "INSERT INTO pfp_shipping";
   $list = " (site_num,project_num,id,date_out,date_in)";
   $values = " VALUES('${site_num}','${proj_num}','${id}','${then[0]}','${now}')";

   #JavaScriptAlert("$insert$list$values");
   $res = ccgg_insert($insert.$list.$values);
   return (TRUE);
}
#
# Function DB_PfpToPrep ########################################################
#
function DB_PfpToPrep($id)
{
   #
   # Indicate in DB that passed ID is in PFP Prep Room
   #
   $sql = "UPDATE pfp_inv SET sample_status_num='1' WHERE id='${id}'";

   #JavaScriptAlert("$sql");
   $res = ccgg_insert($sql);
   #$res = "";
   if (!empty($res)) { return(FALSE); } 
   return(TRUE);
}
#
# Function ReformatHistory ########################################################
#
function ReformatHistory($in, $out)
{
   global   $perldir;
   global $log;
   #
   # Prepare PFP summary
   #
   $z = "${perldir}reformat_history.pl -f${in} -o${out}";

   exec ($z, $arr, $ret);

   if ($ret)
   {
      #
      # Problem reformatting history
      #
      $str = implode("\n", $arr);
      UpdateLog($log, "Reformatting of ${in} failed.");
      if ($str) { UpdateLog($log, "Reformat Error:  ${str}."); }
      JavaScriptAlert($str);
      return (0);
   }
   return (1);
}
#
# Function MakePFPSummary ########################################################
#
function MakePFPSummary($proj_abbr,$f,$all)
{
   global   $perldir;
   #
   # Prepare PFP summary
   #
   $z = "${perldir}create_summary.pl -f${f} -p${proj_abbr}";

   # Read the history file disregarding the Flag History block
   if ( $all ) { $z = $z." -a"; }

   exec($z, $summary, $ret);

   if ($ret)
   {
      #
      # Download Failed
      #
      JavaScriptAlert("Summary Error.  Try downloading again. $ret");
      return "";
   }
   if(count($summary)==0){JavaScriptAlert("Summary error, no data; $z");}
   $summaryaarr = array ();
   for ( $i=0; $i<count($summary); $i++ )
   {
      $field = preg_split("/\s+/",$summary[$i]);

      $tmpaarr = array();
      $tmpaarr['code'] = $field[0];
      $tmpaarr['date'] = $field[1];
      $tmpaarr['time'] = $field[2];
      $tmpaarr['id'] = $field[3];
      $tmpaarr['me'] = $field[4];
      $tmpaarr['lat'] = $field[5];
      $tmpaarr['lon'] = $field[6];
      $tmpaarr['alt'] = $field[7];
      $tmpaarr['alt_source'] = $field[8];
      $tmpaarr['temp'] = $field[9];
      $tmpaarr['rh'] = $field[10];
      $tmpaarr['press'] = $field[11];
      $tmpaarr['status_num'] = $field[12];

      array_push($summaryaarr, $tmpaarr);
   }

   return $summaryaarr;
}
#
# Function DB_RemovePFPFlasks ########################################################
#
function DB_RemovePFPFlasks($id)
{
   #
   # Remove individual PFP flasks from inventory
   # Do not remove PFP Id
   #
   list($pre,$suf) = split("-FP",$id);
   $sql = "DELETE from pfp_inv WHERE id LIKE '${pre}-%' AND id NOT REGEXP '-FP'";

   #JavaScriptAlert("$sql");
   $res = ccgg_delete($sql);
   #$res = "";
   if (!empty($res)) { return(FALSE); }
   return(TRUE);
}
#
# Function makeDirs #################################################################
#
function makeDirs($strPath, $mode = 0777) //creates directory tree recursively
{
   return is_dir($strPath) or ( makeDirs(dirname($strPath), $mode) and mkdir($strPath, $mode) );
}
#
# Function CommentFile #################################################################
#
function CommentFile($in, $out)
{
   global   $perldir;
   global $log;
   #
   # Prepare PFP summary
   #
   $z = "${perldir}add_comments.pl -i${in} -o${out}";

   exec ($z, $arr, $ret);

   if ($ret)
   {
      #
      # Problem reformatting history
      #
      $str = implode("\n", $arr);
      UpdateLog($log, "Commenting of ${in} failed.");
      if ($str) { UpdateLog($log, "Comment Error:  ${str}."); }
      JavaScriptAlert($str);
      return (0);
   }
   return (1);
}
#
# Function ArchiveFile #################################################################
#
function ArchiveFile($sf, $tp, $tf)
{
   if (!file_exists($tp))
   {
      $old_umask = umask(0);
      if ( !(makeDirs($tp)) )
      {
         JavaScriptAlert("Unable to create ${tp}");
              return (0);
      }
      umask($old_umask);
   }
   if (file_exists($tp.$tf))
   {
      $bakfile = $tp.$tf;
      while ( file_exists($bakfile) )
      { $bakfile = $bakfile.'~'; }

      if (!copy($tp.$tf, $bakfile) )
      {
         JavaScriptAlert("Unable to copy to $bakfile.");
         return (0);
      }
      else
      {
         chmod($bakfile, 0666);
      }
   }
   if (!copy($sf, $tp.$tf))
   {
      JavaScriptAlert("Unable to copy to ${tp}${tf}.");
      return (0);
   }
   else
   {
      chmod($tp.$tf, 0666);
   }
   return (1);
}
#
# Function CreateHistName #################################################################
#
function CreateHistName(&$orig, &$reform, $yr)
{
   global $omdir, $yr;

   $z = rand();
   $reform = sprintf("${omdir}pfp/src/tmp/${yr}-%d.his", $z);
   $orig = sprintf("${omdir}pfp/src/tmp/${yr}-%d.orig", $z);
}
#
# Function DB_GetSystemDefi ########################################################
#
function DB_GetSystemNum($abbr)
{
   #
   # Get System Definitions
   #
   $sql="SELECT num FROM system WHERE abbr = '$abbr'";
   return ccgg_query($sql);
}
#
# Function CreateDBBlock ##########################################################
#
function CreateDBBlock($file, $event_nums)
{
   if ( count($event_nums) < 0 )
   {
      JavaScriptAlert("No information to create database block. Get help.");
      return(FALSE);
   }

   $flaskdata_describeaarr = DB_DescribeTable('flask_data');

   if ( empty($flaskdata_describeaarr) )
   {
      JavaScriptAlert("No table information to create database block. Get help.");
      return(FALSE);
   }

   # Append to the history file
   if(!($fh = fopen($file, 'a')))
   { 
      JavaScriptAlert("(f:CreateDBBlock)Unable to open ${file}.  Get help.");
      return(FALSE);
   }

   # Write some blank lines
   fwrite($fh, "\n");
   fwrite($fh, "\n");

   # Create database block header
   $today = gmdate("Y-m-d");
   fwrite($fh, "Database block:$today\n");

   $columns = array ( 'code', 'date', 'time', 'id', 'me', 'lat', 'lon', 'alt (m)', 'alt_source','temp', 'press', 'rh', 'evn');
   $args = array_merge(array('%4s %10s %8s %8s %2s %9s %10s %9s %10s %10s %10s %10s %8s'), $columns);
   $headerline = call_user_func_array('sprintf', $args);
   fwrite($fh, "$headerline\n");

   # Create data lines
   # One row per event number
   $outlineformat = '%-4s %10s %8s %8s %-2s %9.4f %10.4f %9.2f %10s %10.4f %10.4f %10.4f %8d';
   for ( $i=0; $i<count($event_nums); $i++ )
   {
      $select = " SELECT t2.code, t1.date, t1.time, t1.id, t1.me, t1.lat";
      $select = $select.", t1.lon, t1.alt, t3.value as temp";
      $select = $select.", t4.value as press, t5.value as rh, t1.num";
      $from = " FROM flask_event AS t1 INNER JOIN gmd.site AS t2";
      $from = $from." LEFT JOIN flask_data AS t3 ON ( t3.parameter_num = '60' AND t1.num = t3.event_num )";
      $from = $from." LEFT JOIN flask_data AS t4 ON ( t4.parameter_num = '61' AND t1.num = t4.event_num )";
      $from = $from." LEFT JOIN flask_data AS t5 ON ( t5.parameter_num = '62' AND t1.num = t5.event_num )";
      $where = " WHERE t1.num = '$event_nums[$i]'";
      $and = " AND t1.site_num = t2.num";

      $sql = $select.$from.$where.$and;
      #echo "$sql<BR>\n";
      $infos = ccgg_query($sql);

      if ( count($infos) < 0 )
      {
         JavaScriptAlert("No data found in database for '$event_nums[$i]'. Get help.");
         return(FALSE);
      }

      $data = split('\|', $infos[0]);

      # If temperature is empty, then put in the default
      if ( $data[8] == '' )
      { $data[8] = $flaskdata_describeaarr['value']['default']; }
      # If pressure is empty, then put in the default
      if ( $data[9] == '' )
      { $data[9] = $flaskdata_describeaarr['value']['default']; }
      # If relative humidity is empty, then put in the default
      if ( $data[10] == '' )
      { $data[10] = $flaskdata_describeaarr['value']['default']; }

      $select = " SELECT comment";
      $from = " FROM flask_event";
      $where = " WHERE num = '$event_nums[$i]'";

      $sql = $select.$from.$where;
      #echo "$sql<BR>\n";
      $comment = ccgg_query($sql);

      if ( count($comment) < 0 )
      {
         JavaScriptAlert("No comment found in database for '$event_nums[$i]'. Get help.");
         return(FALSE);
      }

      $commentfields = explode('~+~', $comment[0]);

      $alt_source = '';
      for ( $j=0; $j<count($commentfields); $j++ )
      {
         $tmp = explode(':', $commentfields[$j], 2);

         if ( $tmp[0] === 'alt' )
         {
            $alt_source = $tmp[1];
         }
      }

      if ( $alt_source == '' )
      {
         JavaScriptAlert("No comment found in database for '$event_nums[$i]'. Get help.");
         return(FALSE);
      }

      $firsthalf = array_slice($data, 0, 8);
      $secondhalf = array_slice($data, 8);

      array_push($firsthalf, $alt_source);

      $data = array_merge($firsthalf, $secondhalf);

      # Write the line to the output file
      $args = array_merge(array($outlineformat), $data);
      $outline = call_user_func_array('sprintf', $args);
      fwrite($fh, "$outline\n");
   }

   # Close the file
   fclose($fh);

   return(TRUE);
}
?>
