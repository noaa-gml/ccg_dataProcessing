#!/usr/bin/perl
#
# pfp_makesum.pl
#
# Script to construct PFP summary file from history file
# generated by version 2 or 3 PFP software
#
# May 6, 2004 - kam

use DBI;
use Getopt::Std;
#
#######################################
# Parse Arguments
#######################################
#
&getopts('f:h:x:y:z');

@def_coords = ();
$def_coords[0] = ($opt_x) ? ($opt_x) : '';
$def_coords[1] = ($opt_y) ? ($opt_y) : '';
$def_coords[2] = ($opt_z) ? ($opt_z) : '';

$file = $opt_f;
#
#######################################
# Initialization
#######################################
#
%months = ('JAN', 1, 'FEB', 2, 'MAR', 3, 'APR',  4, 'MAY',  5, 'JUN',  6,
	   'JUL', 7, 'AUG', 8, 'SEP', 9, 'OCT', 10, 'NOV', 11, 'DEC', 12);

@tmp = localtime();
$year = sprintf("%4.4d",1900+$tmp[5]);

open (FILE, $file) || die "Can't open file $file.\n";
@arr = <FILE>;
close(FILE);
#
# Get PFP Id
#
$case_id = &get_PFPid(@arr);
#
# Version 2 or 3?
#
$ver = ($case_id < 3000) ? 2 : 3;
#
# Get site code
#
$site = &get_sitecode(@arr);
#
# Get default coordinates
#
@coord = &get_defaultcoords($site,@def_coords);
#
# Determine which flasks were sampled.
#
@samples = &flasks_sampled(@arr);
#
# Determine which flasks should be analyzed.
#
@flags = &flasks_2b_analyzed(@arr);
#
# Grab altitude plan.
#
@altitude_plan = &altitude_plan(@arr);
#
# Grab ambient conditions.
#
@ambient = &get_ambientconds(@arr);
#
# Grab flask collection details.
#
@key = &flask_key($ver,@arr);
#
# Build summary strings
#
@sum = ();
for ($i=0; $i<@samples; $i++)
{ 
	if (($z = grep(/[0-9,a-z,A-Z]/,$key[$i])) == 0) {exit(1);}
	if (($z = grep(/[0-9,a-z,A-Z]/,$altitude_plan[$i])) == 0) {exit(1);}
	if (($z = grep(/[0-9]/,$flags[$i])) == 0) {exit(1);}
	if (($z = grep(/[0-9]/,$ambient[$i])) == 0) {exit(1);}

	@sum[$i] = sprintf("%s %8.1f %s %1d %s\n", 
	$key[$i],&round($altitude_plan[$i],-1),$ambient[$i],$flags[$i]);
}
print @sum;
exit;

sub	get_sitecode
{
local(@a)=@_;

	for ($i=0; $i<@a; $i++)
	{ 
		if ($a[$i] =~ "Site History") { $i1 = $i; }
		if ($a[$i] =~ "Serial Number History") { $i2 = $i; }
	}
	for ($i=$i1; $i!=$i2; $i++)
	{
		chop($a[$i]);
		next if (($z = grep(/[a-z,A-Z,0-9]/,$a[$i])) == 0);
		if ($a[$i] =~ "Site Code") { ($a1,$a2,$zzz) = split(' ',$a[$i]); }
	}
	if (($z = grep(/[a-z,A-Z,0-9]/,$zzz)) == 0) {exit(1);}
	return $zzz;
}

sub	get_defaultcoords
{
	local($a,@def_coords) = @_;
	my($num,$code,$name,$country,$conv);

	@zzz = ();

	if ($#def_coords == -1)
	{
		$dbh = &connect_db();
		($num,$code,$name,$country,$zzz[0],$zzz[1],$zzz[2],$conv) = &GetSiteDefi($site);
		&disconnect_db($dbh);
	} else { @zzz = @def_coords; }

	return @zzz;
}

sub	get_PFPid
{
local(@a) = @_;

	for ($i=0; $i<@a; $i++)
	{ 
		if ($a[$i] =~ "Serial Number History") { $i1 = $i; }
		if ($a[$i] =~ "Altitude History") { $i2 = $i; }
	}
	for ($i=$i1; $i!=$i2; $i++)
	{
		chop($a[$i]);
		next if (($z = grep(/[a-z,A-Z]/,$a[$i])) == 0);
		if ($a[$i] =~ "Serial Number")
		{
			($a1,$a2,$zzz) = split(' ',$a[$i]);
			$zzz =~ s/-//; 
			$zzz =~ s/^0//; 
		}
	}
	if (($z = grep(/[0-9,a-z,A-Z]/,$zzz)) == 0) {exit(1);}
	return $zzz;
}

sub	flasks_sampled
{
local(@a) = @_;

	@zzz = ();

	for ($i=0; $i<@a; $i++)
	{ 
		if ($a[$i] =~ "Error History") { $i1 = $i; }
		if ($a[$i] =~ "Ambient Conditions") { $i2 = $i; }
	}
	for ($i=$i1,$n=0; $i!=$i2; $i++)
	{
		chop($a[$i]);
		if ($a[$i] =~ "sample")
		{
	 		if ($a[$i] =~ "(plan valid)" && $a[$i] =~ "(taken)")
	 		{
				($a1,$a2) = split(' ',$a[$i]);
				$zzz[$n++] = $a2;
	 		}
		}
	}
	return @zzz;
}

sub	flasks_2b_analyzed
{
local(@a) = @_;
	#
	# Determine which samples should be analyzed 
	# based on the following logic.
	#
	# 1.  IF at least (plan valid) (taken) is
	#     present in Error History THEN flask
	#     should be analyzed (e.g., flag=1).
	# 
	# 2.  IF (plan valid) is present AND (taken)
	#     is not present in Error History THEN 
	#     flask should not be analyzed (e.g., 
	#     flag=0).
	#
	# 3.  IF fill pressure is present AND it is
	#     less than 20 psia THEN do not analyze 
	#     (e.g., flag=0).
	#
	#
	# 4.  IF fill volume is less than 1.0 L AND
	#     fill pressure is greater than or equal
	#     to 49 psia THEN do not analyze 
	#     (e.g., flag=0).
	#
	@zzz = ();

	for ($i=0; $i<@a; $i++)
	{ 
		if ($a[$i] =~ "Error History") { $i1 = $i; }
		if ($a[$i] =~ "Ambient Conditions") { $i2 = $i; }
	}
	for ($j=0; $j<@samples; $j++)
	{
		for ($i=$i1; $i!=$i2; $i++)
		{
			$w = $a[$i];
			chop($w);
			($a1,$a2) = split(' ',$w);
			next if (($z = grep(/[0-9]/,$a2)) == 0);
			if ($samples[$j] == $a2)
			{ 
				if ($a[$i] =~ "(taken)") { $zzz[$j] = "1";}
				else {$zzz[$j] = "0";}
			}
		}
	}

	for ($i=0; $i<@a; $i++)
	{ 
		if ($a[$i] =~ "Fill History") { $i1 = $i; }
		if ($a[$i] =~ "Error History") { $i2 = $i; }
	}
	for ($j=0; $j<@samples; $j++)
	{
		for ($i=$i1; $i!=$i2; $i++)
		{
			$w = $a[$i];
			chop($w);
			($a1,$a2,$a3,$a4,$a5) = split(' ',$w);
 			next if (($z = grep(/[0-9]/,$a1)) == 0);
			if ($samples[$j] == $a1)
			{ 
				#
				# Check 3
				#
				if ($a5 < 20) {$zzz[$j] = "0";}
				#
				# Check 4
				#
				if ($a4 < 1.0 && $a5 >= 49) {$zzz[$j] = "0";}
			}
		}
	}
	return @zzz;
}

sub	altitude_plan
{
local(@a) = @_;
	#
	# Get Altitude plan.
	#
	@zzz = ();

	for ($i=0; $i<@a; $i++)
	{ 
		if ($a[$i] =~ "Altitude History") { $i1 = $i; }
		if ($a[$i] =~ "Location History") { $i2 = $i; }
	}
	for ($j=0; $j<@samples; $j++)
	{
		for ($i=$i1; $i!=$i2; $i++)
		{
			$w = $a[$i];
			chop($w);
			($a1,$a2) = split(' ',$w);
			next if (($z = grep(/[0-9]/,$a1)) == 0);
			if ($samples[$j] == $a1)
			{ 
				#
				# convert to meters
				#
				#$zzz[$j] = $a2 * 0.3048;
				#
				# retain value in 'feet' units
				#
				$zzz[$j] = $a2;
			}
		}
	}
	return @zzz;
}

sub	get_ambientconds
{
local(@a) = @_;
	#
	# Get Ambient conditions.
	# Returned array contains formatted output strings.
	#
	@zzz = ();

	for ($i=0; $i<@a; $i++)
	{ 
		if ($a[$i] =~ "Ambient Conditions") { $i1 = $i; }
	}
	$i2 = $i;

	for ($j=0; $j<@samples; $j++)
	{
		for ($i=$i1; $i!=$i2; $i++)
		{
			$w = $a[$i];
			chop($w);
			($a1,$a2,$a3,$a4) = split(' ',$w);
			next if (($z = grep(/[0-9]/,$a1)) == 0);
			if ($samples[$j] == $a1)
			{
				if ($a2 <= -99) { $a2 = -999.9; }
				if ($a3 <= -999) { $a3 = -9999.9; }
				if ($a4 <= -99) { $a4 = -999.9; }
				$zzz[$j] = sprintf("%6.1f %6.1f %6.1f",$a2,$a3,$a4);
			}
		}
	}
	return @zzz;
}

sub	flask_key
{
local($ver,@a) = @_;
	#
	# Build primary key for each flask sampled.
	#
	@zzz = ();
	 
	$format = "%3s %4d-%02d-%02d %02d:%02d:%02d %8.8s A %6.2f %7.2f";

	for ($i=0; $i<@a; $i++)
	{ 
		if ($a[$i] =~ "Location History") { $i1 = $i; }
		if ($a[$i] =~ "Fill History") { $i2 = $i; }
	}
	#
	# Use ending sample time.
	# October 6, 2004 - pml,kam
	#
	for ($j=0; $j<@samples; $j++)
	{
		for ($i=$i1; $i!=$i2; $i++)
		{
			$w = $a[$i];
			chop($w);
			#
                        # version-specific code
                        #
                        if ($ver == 3)
                        {
                                ($id1,$lat1,$lon1,$lat2,$lon2,$t1,$t2,$date) = split(' ',$w);
                                $yr = substr($date,0,4);
                                $mo = substr($date,5,2);
                                $dy = substr($date,8,2);
				$hr = substr($t2,0,2);
				$mn = substr($t2,3,2);
				$sc = substr($t2,6,2);
                        }
                        else
                        {
				($id1,$lat1,$lon1,$lat2,$lon2,$t1,$t2,$tz,$mon,$dy) = split(' ',$w);
				$hr = substr($t2,0,2);
				$mn = substr($t2,3,2);
				$sc = 0;
			}

			next if (($z = grep(/[0-9]/,$id1)) == 0);
			if ($samples[$j] == $id1)
			{
				#
				# Use actual or default lat/lon coordinates? 
				#
				if (($lat1 == '0.000' || $lat1 < -90) ||
				($lon1 == '0.000' || $lon1 < -180))
				{ $zz1 = $coord[0]; $zz2 = $coord[1]; }
				else
				{ $zz1 = $lat1; $zz2 = $lon1; }

				$id = sprintf("%s-%02d",$case_id,$id1);
				if ($ver == 3)
                                { $zzz[$j] = sprintf $format,$site,$yr,$mo,$dy,$hr,$mn,$sc,$id,$zz1,$zz2; }
                                else
                                { $zzz[$j] = sprintf $format,$site,$year,$months{uc($mon)},$dy,$hr,$mn,$sc,$id,$zz1,$zz2; }
			}
		}
	}
	return @zzz;
}

sub     round
{
local($n,$power) = @_;

        $t = $n*(10.0**(-1*$power));
        $t1 = ($t<0) ? $t-0.5 : $t+0.5;
        return(int($t1)*(10.0**$power));
}
#
#######################################
# Connect to DB
#######################################
#
sub connect_db
{
	$host = "";
	$dr = "mysql";
	$db = "";
	$user = "";
	$pwd = "";

	$z = "DBI:$dr:database=$db;host=$host";
	$dbh = DBI->connect($z, $user, $pwd) or die $DBI::errstr;

	return $dbh;
}
#
#######################################
# Disconnect from DB
#######################################
#
sub disconnect_db
{
	($dbh) = @_;
         $dbh->disconnect();
}
#
#######################################
# Get Site Definition
#######################################
#
sub GetSiteDefi
{
local($a) = @_;

	$select = "SELECT num,code,name,country,lat,lon,elev,lst2utc";
	$from = " FROM site";
	$where = " WHERE code='${a}'";

	$sql = $select.$from.$where;
	$sth = $dbh->prepare($sql);
	$sth->execute();

	@defi = $sth->fetchrow_array();
	$sth->finish();
	return @defi;
}
